<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luxaviar&#39;s Blog</title>
    <link>https://luxaviar.github.io/</link>
    <description>Recent content on Luxaviar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Jun 2022 18:22:01 +0800</lastBuildDate><atom:link href="https://luxaviar.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实时渲染中的反走样：TAA</title>
      <link>https://luxaviar.github.io/post/20220611-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7TAA/</link>
      <pubDate>Sat, 11 Jun 2022 18:22:01 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220611-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7TAA/</guid>
      <description>和之前讨论的反走样方法一样，TAA也属于空域反走样，但不同之处在于，TAA把时间维度考虑进来了，它在收集了多帧历史数据的基础上进行空域反走样</description>
    </item>
    
    <item>
      <title>实时渲染中的反走样：空域滤波抗锯齿</title>
      <link>https://luxaviar.github.io/post/20220605-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7%E7%A9%BA%E5%9F%9F%E6%BB%A4%E6%B3%A2%E6%8A%97%E9%94%AF%E9%BD%BF/</link>
      <pubDate>Sun, 05 Jun 2022 22:32:55 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220605-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7%E7%A9%BA%E5%9F%9F%E6%BB%A4%E6%B3%A2%E6%8A%97%E9%94%AF%E9%BD%BF/</guid>
      <description>MSAA对几何走样有很好的表现，并且避免了SSAA成倍的着色开销，但缺点也很明显： 深度和颜色缓冲的显存和带宽开销并没有减少 不适用于延迟渲染（</description>
    </item>
    
    <item>
      <title>实时渲染中的反走样：MSAA</title>
      <link>https://luxaviar.github.io/post/20220529-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7MSAA/</link>
      <pubDate>Sun, 29 May 2022 18:50:19 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220529-%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E5%8F%8D%E8%B5%B0%E6%A0%B7MSAA/</guid>
      <description>原理 如上一篇文章 所述，在实时渲染中走样不可避免，虽然SSAA能同时解决着色和几何走样，但由于高昂的性能开销注定无法成为主流，于是各种Anti</description>
    </item>
    
    <item>
      <title>渲染中的采样理论</title>
      <link>https://luxaviar.github.io/post/20220528-%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E9%87%87%E6%A0%B7%E7%90%86%E8%AE%BA/</link>
      <pubDate>Sat, 28 May 2022 17:03:42 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220528-%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E9%87%87%E6%A0%B7%E7%90%86%E8%AE%BA/</guid>
      <description>采样定理 采样是将一个信号（例如时间或空间上连续的函数）转换为离散序列（时间或空间上离散的函数）的过程。信号可以是任何维度的连续函数，最常见的</description>
    </item>
    
    <item>
      <title>刚体物理引擎实现之约束算解</title>
      <link>https://luxaviar.github.io/post/20220404-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%BA%A6%E6%9D%9F%E7%AE%97%E8%A7%A3/</link>
      <pubDate>Mon, 04 Apr 2022 16:08:20 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220404-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%BA%A6%E6%9D%9F%E7%AE%97%E8%A7%A3/</guid>
      <description>约束(Constraints) 约束就是模拟过程中必须遵守的规则，三维空间中的自由刚体有6个自由度：3个位置和3个转动; 二维空间中的刚体有3个</description>
    </item>
    
    <item>
      <title>刚体物理引擎实现之刚体动力学</title>
      <link>https://luxaviar.github.io/post/20220404-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%88%9A%E4%BD%93%E5%8A%A8%E5%8A%9B%E5%AD%A6/</link>
      <pubDate>Mon, 04 Apr 2022 16:03:20 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220404-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%88%9A%E4%BD%93%E5%8A%A8%E5%8A%9B%E5%AD%A6/</guid>
      <description>物理模拟 为了模拟真实世界的物理碰撞反馈，我们需要一些基于牛顿运动定律的动力学知识，来模拟碰撞反馈。物理引擎执行模拟的流程如下： 假设时间是\(</description>
    </item>
    
    <item>
      <title>刚体物理引擎实现之碰撞检测</title>
      <link>https://luxaviar.github.io/post/20220403-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sun, 03 Apr 2022 13:59:51 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220403-%E5%88%9A%E4%BD%93%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/</guid>
      <description>GJK GJK（Gilbert-Johnson-Keerthi）是一个简洁优雅的算法，用来判断两个凸几何体之间是否发生碰撞，现代物理引擎基本都采用</description>
    </item>
    
    <item>
      <title>并发编程漫谈</title>
      <link>https://luxaviar.github.io/post/20220319-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%BC%AB%E8%B0%88/</link>
      <pubDate>Sat, 19 Mar 2022 19:49:01 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20220319-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%BC%AB%E8%B0%88/</guid>
      <description>基础知识 处理器架构演进 Cache 现代处理器的时钟周期通常为0.5 ns，而访问主存的时间为50ns 或更长。因此，访问内存是非常昂贵的，超过100个时钟</description>
    </item>
    
    <item>
      <title>矩阵的主序</title>
      <link>https://luxaviar.github.io/post/20211024-%E7%9F%A9%E9%98%B5%E7%9A%84%E4%B8%BB%E5%BA%8F/</link>
      <pubDate>Sun, 24 Oct 2021 17:52:17 +0800</pubDate>
      
      <guid>https://luxaviar.github.io/post/20211024-%E7%9F%A9%E9%98%B5%E7%9A%84%E4%B8%BB%E5%BA%8F/</guid>
      <description>有两个独立的概念涉及到行主序和列主序，分别是表示（标记）和存储： 当拿起纸和笔做数学题的时候，头脑中浮现的矩阵有一个表示上的惯例。 当实现一个矩</description>
    </item>
    
  </channel>
</rss>
